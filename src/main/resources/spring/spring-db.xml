<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
       "
>

    <!-- Общая для всех профилей часть -->

    <jdbc:initialize-database enabled="${database.init}">
        <jdbc:script encoding="utf-8" location="${sql.initLocation}"/>
        <jdbc:script encoding="utf-8" location="${sql.populateLocation}"/>
    </jdbc:initialize-database>

    <!-- Тэг вынесен из <beans profile="jpa, datajpa"> т.к. теперь и для jdbc профиля определён менеджер транзакций -->
    <tx:annotation-driven/>

    <!-- Choose profile from (hsqldb/ postgres) -->

    <beans profile="hsqldb">
        <!--
        Если в разных файлах свойств будут встречаться одинаковые свойства с разными значениями,
        то результирующим значением будет то, которое встретилось последним.
        -->
        <context:property-placeholder location="classpath:db/common.properties, classpath:db/hsqldb.properties"
                                      system-properties-mode="OVERRIDE"/>
    </beans>

    <beans profile="postgres">
        <!--
            For postgres driver logging
            It uses java.util.logging and logged via jul-to-slf4j bridge
            https://stackoverflow.com/a/27296470/548473
        -->
        <bean class="org.springframework.beans.factory.config.MethodInvokingBean">
            <property name="staticMethod" value="org.slf4j.bridge.SLF4JBridgeHandler.install"/>
        </bean>

        <context:property-placeholder location="classpath:db/common.properties, classpath:db/postgres.properties"
                                      system-properties-mode="OVERRIDE"/>
    </beans>

    <beans profile="postgres, hsqldb">
        <bean id="dataSource"
              class="${dataSourceClass}"
              p:driverClassName="${driverClassName}"
              p:url="${database.url}"
              p:username="${database.username}"
              p:password="${database.password}"/>
    </beans>

    <beans profile="tomcat">
        <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/real-estate"/>
        <context:property-placeholder location="classpath:db/common.properties, classpath:db/tomcat.properties"
                                      system-properties-mode="OVERRIDE"/>
    </beans>


    <!-- Choose profile from (jdbc/ datajpa/ jpa) -->

    <beans profile="jdbc">
        <context:component-scan base-package="com.timmax.**.repository.jdbc"/>
        <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
            <constructor-arg ref="dataSource"/>
        </bean>

        <bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
            <constructor-arg ref="jdbcTemplate"/>
        </bean>

        <bean id="transactionManager"
              class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="dataSource" />
        </bean>
    </beans>

    <beans profile="jpa, datajpa">
        <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
              p:dataSource-ref="dataSource"
              p:packagesToScan="com.timmax.**.model">
            <!--p:persistenceUnitName="persistenceUnit">-->

            <property name="jpaPropertyMap">
                <map>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}"
                           value="${hibernate.use_sql_comments}"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).JPA_PROXY_COMPLIANCE}" value="false"/>
                    <!--<entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_AUTO}" value="${hibernate.hbm2ddl.auto}"/>-->

                    <!--https://github.com/hibernate/hibernate-orm/blob/master/documentation/src/main/asciidoc/userguide/chapters/caching/Caching.adoc#caching-provider-jcache-->
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).CACHE_REGION_FACTORY}"
                           value="org.hibernate.cache.jcache.internal.JCacheRegionFactory"/>
                    <entry key="#{T(org.hibernate.cache.jcache.ConfigSettings).PROVIDER}"
                           value="org.ehcache.jsr107.EhcacheCachingProvider"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SECOND_LEVEL_CACHE}" value="true"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_QUERY_CACHE}"
                           value="false"/> <!--default-->
                    <!-- Generation sql-scripts from java entities: -->
<!--
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_SCRIPTS_ACTION}"
                           value="drop-and-create"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_SCRIPTS_CREATE_TARGET}"
                           value="${REALESTATE_ROOT}/config/ddl/create.ddl"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_SCRIPTS_DROP_TARGET}"
                           value="${REALESTATE_ROOT}/config/ddl/drop.ddl"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_AUTO}" value="create"/>
-->
                </map>
            </property>

            <property name="jpaVendorAdapter">
                <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" p:showSql="${jpa.showSql}">
                </bean>
            </property>
        </bean>

        <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
        <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
              p:entityManagerFactory-ref="entityManagerFactory"/>
        <bean class="com.timmax.realestate.repository.JpaUtil"/>
    </beans>

    <beans profile="jpa">
        <context:component-scan base-package="com.timmax.**.repository.jpa"/>
    </beans>

    <beans profile="datajpa">
        <context:component-scan base-package="com.timmax.**.repository.datajpa"/>
        <jpa:repositories base-package="com.timmax.**.repository.datajpa"/>
    </beans>
</beans>