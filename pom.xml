<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.timmax</groupId>
    <artifactId>real-estate</artifactId>
    <packaging>war</packaging>

    <version>1.0-SNAPSHOT</version>

    <name>Exploitation of objects of real estate</name>

    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- Logging -->
        <logback.version>1.2.13</logback.version>
        <slf4j.version>1.7.36</slf4j.version>
    </properties>

    <build>
        <finalName>real-estate</finalName>
        <defaultGoal>package</defaultGoal>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.4.0</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <!-- Logging with SLF4J & LogBack -->
        <dependency>
            <!--
            Этой зависимости в предыдущем коммите не было, т.к. она транзитивно подтягивалась,
            но с версией 1.7.32.
            -->
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <!--
            Теперь указываем более позднюю версию 1.7.36 и теперь именно она будет использована.
            Если же нужно как-то не во всех модулях использовать только позднюю версию,
            то такой вариант рассмотрен в курсе MasterJava - там будет про специальный плагин в Мавен,
            который запрещает автоматически разрешать эти конфликты.
            -->
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <!--
            logback-classic 1.2.13 зависит от:
            - slf4j-api 1.7.32
            - logback-core 1.2.13
            Мавен сам подтянет эти зависимости.
            -->
            <version>${logback.version}</version>
            <scope>runtime</scope>
        </dependency>
        <!--Web-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <!--
            https://java-online.ru/maven-faq.xhtml#scope
            Scope provided означает, что зависимость используется при компиляции, но не пакуется в WAR (можете проверить).
            Эти классы уже есть в Tomcat и в WAR они будут мешать его правильной работе.
            -->
            <scope>provided</scope>
        </dependency>
    </dependencies>
</project>
